/* filter_ir_cabsim_SD_F32.cpp
 *
 * Piotr Zapart 11.2024 www.hexefx.com
 *  - Combined into a stereo speaker simulator
 *  - Added IR wav file loading from an SD card
 *  - Added stereo enhancer for double tracking emulation
 * -  enhancer for double tracking emulation
 * 
 * based on:
 *               A u d i o FilterConvolutionUP
 * Uniformly-Partitioned Convolution Filter for Teeny 4.0
 * Written by Brian Millier November 2019
 * adapted from routines written for Teensy 4.0 by Frank DD4WH 
 * that were based upon code/literature by Warren Pratt 
 *
 * This program is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free Software Foundation, 
 * either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. 
 * If not, see <https://www.gnu.org/licenses/>."
 */
#include "filter_ir_cabsim_SD_F32.h"

#define TCAB_IR_NAME_SIZE_BYTES	(128)
#define TCAB_WAV_RIFF			(0x46464952ul)
#define TCAB_WAV_WAVE			(0x45564157ul)
#define TCAB_WAV_FMT			(0x20746d66ul)
#define TCAB_WAV_LIST			(0x5453494Cul)
#define TCAB_WAV_DATA			(0x61746164ul)

PROGMEM const float32_t ir_default_guitar_data[3840] =
{
	 0.067476, 	 0.307443, 	 0.670705, 	 0.946989, 	 0.988556, 	 0.790246, 	 0.417615, 	-0.026582, 
	-0.401135, 	-0.588549, 	-0.569781, 	-0.416761, 	-0.203467, 	 0.017792, 	 0.168615, 	 0.187872, 
	 0.116245, 	 0.038240, 	-0.012207, 	-0.037843, 	-0.029695, 	 0.019013, 	 0.074709, 	 0.090365, 
	 0.059236, 	 0.009644, 	-0.035005, 	-0.060427, 	-0.063601, 	-0.062410, 	-0.070009, 	-0.083010, 
	-0.107700, 	-0.148381, 	-0.186895, 	-0.193609, 	-0.161473, 	-0.104923, 	-0.042848, 	 0.010926, 
	 0.048555, 	 0.078310, 	 0.107517, 	 0.123814, 	 0.101932, 	 0.036317, 	-0.048677, 	-0.127445, 
	-0.175939, 	-0.170568, 	-0.116733, 	-0.054537, 	-0.019196, 	-0.014100, 	-0.024018, 	-0.031678, 
	-0.027741, 	-0.012848, 	-0.000122, 	-0.007874, 	-0.042329, 	-0.091494, 	-0.132847, 	-0.144993, 
	-0.121525, 	-0.077395, 	-0.037263, 	-0.019532, 	-0.024781, 	-0.043336, 	-0.066836, 	-0.086886, 
	-0.096377, 	-0.095340, 	-0.083956, 	-0.053346, 	-0.008484, 	 0.027161, 	 0.033876, 	 0.013245, 
	-0.024232, 	-0.066286, 	-0.095431, 	-0.099918, 	-0.087710, 	-0.078860, 	-0.087283, 	-0.113651, 
	-0.147282, 	-0.170843, 	-0.169012, 	-0.138890, 	-0.093631, 	-0.057802, 	-0.046388, 	-0.052400, 
	-0.063051, 	-0.072909, 	-0.074740, 	-0.060335, 	-0.034303, 	-0.010987, 	-0.000305, 	-0.006867, 
	-0.031098, 	-0.062563, 	-0.087680, 	-0.095614, 	-0.083316, 	-0.053499, 	-0.016053, 	 0.014893, 
	 0.029115, 	 0.023286, 	 0.002930, 	-0.021699, 	-0.038636, 	-0.043306, 	-0.039277, 	-0.035310, 
	-0.036348, 	-0.044160, 	-0.050966, 	-0.049684, 	-0.038820, 	-0.023194, 	-0.008850, 	-0.001038, 
	-0.001526, 	-0.008545, 	-0.019990, 	-0.029359, 	-0.029664, 	-0.016968, 	 0.002716, 	 0.020997, 
	 0.028565, 	 0.022126, 	 0.004120, 	-0.015076, 	-0.025178, 	-0.022767, 	-0.007111, 	 0.014313, 
	 0.028748, 	 0.030549, 	 0.024567, 	 0.020142, 	 0.026643, 	 0.046907, 	 0.074038, 	 0.092532, 
	 0.089358, 	 0.061769, 	 0.020936, 	-0.017792, 	-0.040712, 	-0.041322, 	-0.023194, 	 0.001282, 
	 0.020356, 	 0.029633, 	 0.029420, 	 0.022584, 	 0.012726, 	 0.004212, 	-0.000366, 	-0.001312, 
	-0.000916, 	-0.000702, 	-0.000580, 	-0.001190, 	-0.001862, 	-0.001099, 	 0.001831, 	 0.005432, 
	 0.008515, 	 0.013062, 	 0.017762, 	 0.021302, 	 0.023927, 	 0.027711, 	 0.032075, 	 0.036836, 
	 0.040468, 	 0.042299, 	 0.041017, 	 0.039430, 	 0.040803, 	 0.047914, 	 0.059938, 	 0.073489, 
	 0.083743, 	 0.085360, 	 0.076479, 	 0.058412, 	 0.038759, 	 0.026368, 	 0.024751, 	 0.031220, 
	 0.040407, 	 0.045381, 	 0.043580, 	 0.037324, 	 0.035005, 	 0.040773, 	 0.052889, 	 0.066988, 
	 0.078219, 	 0.081759, 	 0.075594, 	 0.063631, 	 0.053285, 	 0.049806, 	 0.053407, 	 0.059755, 
	 0.064943, 	 0.066622, 	 0.065371, 	 0.061953, 	 0.057711, 	 0.052553, 	 0.046632, 	 0.040620, 
	 0.035890, 	 0.032746, 	 0.033418, 	 0.038972, 	 0.049440, 	 0.061525, 	 0.070833, 	 0.075686, 
	 0.075167, 	 0.072604, 	 0.071017, 	 0.072024, 	 0.073305, 	 0.072481, 	 0.068758, 	 0.062166, 
	 0.052522, 	 0.041383, 	 0.030915, 	 0.022614, 	 0.015381, 	 0.007691, 	-0.001495, 	-0.010102, 
	-0.014527, 	-0.010712, 	 0.001862, 	 0.019623, 	 0.035981, 	 0.045991, 	 0.047517, 	 0.041810, 
	 0.031770, 	 0.021943, 	 0.015809, 	 0.015076, 	 0.018708, 	 0.024628, 	 0.029633, 	 0.032441, 
	 0.033418, 	 0.034089, 	 0.034974, 	 0.036775, 	 0.039918, 	 0.042024, 	 0.042024, 	 0.040071, 
	 0.038026, 	 0.037599, 	 0.039552, 	 0.042970, 	 0.046022, 	 0.047365, 	 0.046144, 	 0.043092, 
	 0.039216, 	 0.036073, 	 0.033387, 	 0.031831, 	 0.030854, 	 0.031098, 	 0.030854, 	 0.029481, 
	 0.026002, 	 0.021332, 	 0.017151, 	 0.015442, 	 0.016205, 	 0.018525, 	 0.020173, 	 0.020020, 
	 0.017304, 	 0.013428, 	 0.010743, 	 0.012421, 	 0.019288, 	 0.029176, 	 0.035768, 	 0.035554, 
	 0.027833, 	 0.016663, 	 0.006775, 	 0.003204, 	 0.006470, 	 0.012818, 	 0.017212, 	 0.016236, 
	 0.010102, 	 0.002838, 	-0.001831, 	-0.001709, 	 0.001465, 	 0.005219, 	 0.005737, 	 0.002167, 
	-0.004669, 	-0.010529, 	-0.013581, 	-0.014588, 	-0.015961, 	-0.019654, 	-0.025269, 	-0.032350, 
	-0.038942, 	-0.042787, 	-0.041871, 	-0.036836, 	-0.030488, 	-0.026612, 	-0.026429, 	-0.029328, 
	-0.032228, 	-0.032685, 	-0.029878, 	-0.024842, 	-0.018494, 	-0.013825, 	-0.012116, 	-0.014679, 
	-0.020569, 	-0.027558, 	-0.033021, 	-0.034272, 	-0.030519, 	-0.023225, 	-0.015656, 	-0.010620, 
	-0.010132, 	-0.013001, 	-0.016907, 	-0.019440, 	-0.019318, 	-0.016755, 	-0.013489, 	-0.011383, 
	-0.011444, 	-0.011841, 	-0.011872, 	-0.011048, 	-0.010193, 	-0.010865, 	-0.013276, 	-0.018250, 
	-0.024079, 	-0.030152, 	-0.033753, 	-0.034761, 	-0.032991, 	-0.029695, 	-0.027253, 	-0.026337, 
	-0.027711, 	-0.029939, 	-0.032563, 	-0.034120, 	-0.034150, 	-0.031831, 	-0.027894, 	-0.023438, 
	-0.019868, 	-0.019471, 	-0.022645, 	-0.029237, 	-0.036592, 	-0.043123, 	-0.045900, 	-0.044099, 
	-0.038148, 	-0.030519, 	-0.025391, 	-0.023591, 	-0.025300, 	-0.027375, 	-0.028840, 	-0.028871, 
	-0.028443, 	-0.028077, 	-0.028871, 	-0.031007, 	-0.034455, 	-0.039308, 	-0.045595, 	-0.052309, 
	-0.058107, 	-0.061434, 	-0.062044, 	-0.060488, 	-0.059114, 	-0.058748, 	-0.059358, 	-0.058840, 
	-0.055452, 	-0.048585, 	-0.039888, 	-0.031922, 	-0.027284, 	-0.026887, 	-0.028779, 	-0.030427, 
	-0.030061, 	-0.027650, 	-0.024445, 	-0.022553, 	-0.022675, 	-0.025330, 	-0.028687, 	-0.030641, 
	-0.030915, 	-0.029633, 	-0.028962, 	-0.029725, 	-0.031770, 	-0.033815, 	-0.033906, 	-0.031709, 
	-0.028871, 	-0.026734, 	-0.026307, 	-0.025910, 	-0.024689, 	-0.020905, 	-0.015290, 	-0.009186, 
	-0.006256, 	-0.009278, 	-0.017579, 	-0.027680, 	-0.034242, 	-0.034700, 	-0.029359, 	-0.022401, 
	-0.017701, 	-0.018799, 	-0.024049, 	-0.030732, 	-0.035249, 	-0.036134, 	-0.033723, 	-0.028901, 
	-0.024293, 	-0.020417, 	-0.017609, 	-0.015198, 	-0.012360, 	-0.009552, 	-0.007843, 	-0.008179, 
	-0.010804, 	-0.014496, 	-0.017640, 	-0.018952, 	-0.018342, 	-0.017701, 	-0.018128, 	-0.020508, 
	-0.024232, 	-0.028596, 	-0.032472, 	-0.035005, 	-0.035890, 	-0.035188, 	-0.033906, 	-0.032044, 
	-0.029572, 	-0.026490, 	-0.023225, 	-0.020051, 	-0.017884, 	-0.016999, 	-0.017243, 	-0.017914, 
	-0.017701, 	-0.016266, 	-0.013337, 	-0.010437, 	-0.007904, 	-0.006775, 	-0.006195, 	-0.006073, 
	-0.005036, 	-0.003449, 	-0.001617, 	-0.001404, 	-0.002289, 	-0.004181, 	-0.004944, 	-0.003601, 
	-0.000122, 	 0.005066, 	 0.009796, 	 0.012757, 	 0.012726, 	 0.010773, 	 0.007904, 	 0.006256, 
	 0.006348, 	 0.008606, 	 0.011963, 	 0.014863, 	 0.015687, 	 0.015351, 	 0.013459, 	 0.011078, 
	 0.007752, 	 0.005219, 	 0.002930, 	 0.001648, 	 0.000580, 	 0.000092, 	-0.001221, 	-0.003204, 
	-0.005280, 	-0.006043, 	-0.004395, 	 0.000000, 	 0.005524, 	 0.010956, 	 0.014924, 	 0.016724, 
	 0.016266, 	 0.014649, 	 0.013489, 	 0.013794, 	 0.015748, 	 0.019562, 	 0.023804, 	 0.026673, 
	 0.026826, 	 0.024628, 	 0.021455, 	 0.018159, 	 0.015656, 	 0.014344, 	 0.014191, 	 0.014496, 
	 0.014191, 	 0.012879, 	 0.010743, 	 0.008240, 	 0.006592, 	 0.007141, 	 0.008545, 	 0.010041, 
	 0.009796, 	 0.008301, 	 0.006073, 	 0.004608, 	 0.005371, 	 0.007752, 	 0.011017, 	 0.013550, 
	 0.014618, 	 0.014222, 	 0.012940, 	 0.011689, 	 0.011505, 	 0.013245, 	 0.015839, 	 0.019196, 
	 0.022126, 	 0.025025, 	 0.027131, 	 0.028443, 	 0.028932, 	 0.028596, 	 0.028413, 	 0.028779, 
	 0.030732, 	 0.033021, 	 0.034791, 	 0.035615, 	 0.034913, 	 0.032777, 	 0.030274, 	 0.028626, 
	 0.028779, 	 0.029908, 	 0.031434, 	 0.031190, 	 0.029420, 	 0.025361, 	 0.021607, 	 0.019288, 
	 0.019166, 	 0.020814, 	 0.022980, 	 0.024201, 	 0.024354, 	 0.023072, 	 0.019959, 	 0.015961, 
	 0.011811, 	 0.009552, 	 0.009400, 	 0.011719, 	 0.015839, 	 0.020478, 	 0.024262, 	 0.026673, 
	 0.028016, 	 0.028871, 	 0.030183, 	 0.032685, 	 0.035859, 	 0.037660, 	 0.036439, 	 0.031861, 
	 0.026124, 	 0.021271, 	 0.019074, 	 0.019654, 	 0.021943, 	 0.024445, 	 0.025513, 	 0.024506, 
	 0.021943, 	 0.018769, 	 0.016511, 	 0.015503, 	 0.015809, 	 0.016144, 	 0.015992, 	 0.014374, 
	 0.012818, 	 0.011719, 	 0.011872, 	 0.012940, 	 0.014100, 	 0.015046, 	 0.015442, 	 0.015015, 
	 0.013947, 	 0.011719, 	 0.009949, 	 0.009674, 	 0.011750, 	 0.016236, 	 0.022217, 	 0.027528, 
	 0.029603, 	 0.027833, 	 0.023774, 	 0.019898, 	 0.018525, 	 0.020539, 	 0.025056, 	 0.029939, 
	 0.033174, 	 0.033326, 	 0.030396, 	 0.025575, 	 0.020905, 	 0.018097, 	 0.017640, 	 0.019654, 
	 0.022187, 	 0.024293, 	 0.024323, 	 0.022279, 	 0.019105, 	 0.016907, 	 0.016877, 	 0.018403, 
	 0.019318, 	 0.018342, 	 0.015687, 	 0.011505, 	 0.007385, 	 0.004425, 	 0.003052, 	 0.002258, 
	 0.000946, 	-0.000153, 	-0.000855, 	-0.000916, 	 0.000519, 	 0.003021, 	 0.005036, 	 0.006195, 
	 0.006195, 	 0.006561, 	 0.008118, 	 0.011353, 	 0.015290, 	 0.018281, 	 0.019837, 	 0.019623, 
	 0.017273, 	 0.013581, 	 0.009278, 	 0.004517, 	-0.001282, 	-0.006623, 	-0.010132, 	-0.010681, 
	-0.008728, 	-0.005524, 	-0.003052, 	-0.002350, 	-0.002503, 	-0.003693, 	-0.006348, 	-0.008301, 
	-0.008301, 	-0.007080, 	-0.005402, 	-0.003327, 	-0.001526, 	-0.002075, 	-0.003601, 	-0.004547, 
	-0.005158, 	-0.004791, 	-0.002777, 	 0.001465, 	 0.004242, 	 0.005219, 	 0.005371, 	 0.006226, 
	 0.008118, 	 0.010651, 	 0.013428, 	 0.013611, 	 0.011444, 	 0.007691, 	 0.004547, 	 0.004028, 
	 0.005737, 	 0.008881, 	 0.009705, 	 0.007843, 	 0.003327, 	-0.000885, 	-0.003632, 	-0.003235, 
	-0.001648, 	 0.000031, 	 0.000244, 	-0.001312, 	-0.003876, 	-0.005921, 	-0.007141, 	-0.008087, 
	-0.008942, 	-0.009461, 	-0.010254, 	-0.010804, 	-0.009980, 	-0.007782, 	-0.006073, 	-0.005737, 
	-0.006012, 	-0.005921, 	-0.005005, 	-0.003174, 	-0.000488, 	 0.001526, 	 0.001923, 	 0.000549, 
	-0.001465, 	-0.002014, 	-0.000397, 	 0.002899, 	 0.005676, 	 0.005921, 	 0.003571, 	-0.001495, 
	-0.007599, 	-0.013031, 	-0.016236, 	-0.017090, 	-0.016175, 	-0.015015, 	-0.013215, 	-0.012726, 
	-0.012574, 	-0.014161, 	-0.016297, 	-0.019349, 	-0.021882, 	-0.023164, 	-0.022431, 	-0.019410, 
	-0.014466, 	-0.010254, 	-0.007904, 	-0.008637, 	-0.011353, 	-0.015534, 	-0.019074, 	-0.020722, 
	-0.019776, 	-0.016694, 	-0.013520, 	-0.011322, 	-0.011597, 	-0.012665, 	-0.013642, 	-0.012696, 
	-0.009888, 	-0.005524, 	-0.001831, 	-0.000916, 	-0.003174, 	-0.008026, 	-0.012360, 	-0.014191, 
	-0.012360, 	-0.008087, 	-0.003876, 	-0.002228, 	-0.004181, 	-0.008667, 	-0.014557, 	-0.019929, 
	-0.023652, 	-0.023804, 	-0.022309, 	-0.019898, 	-0.019318, 	-0.019562, 	-0.020478, 	-0.020356, 
	-0.019776, 	-0.018036, 	-0.016266, 	-0.015198, 	-0.015870, 	-0.017792, 	-0.019562, 	-0.019623, 
	-0.018036, 	-0.015473, 	-0.013153, 	-0.012268, 	-0.012421, 	-0.013611, 	-0.015015, 	-0.015961, 
	-0.016938, 	-0.017609, 	-0.018281, 	-0.018799, 	-0.019349, 	-0.019074, 	-0.017487, 	-0.014985, 
	-0.012513, 	-0.010559, 	-0.009980, 	-0.010987, 	-0.013550, 	-0.015961, 	-0.017457, 	-0.017396, 
	-0.016419, 	-0.015900, 	-0.016388, 	-0.018281, 	-0.020661, 	-0.022401, 	-0.022462, 	-0.021180, 
	-0.018921, 	-0.017182, 	-0.015931, 	-0.015412, 	-0.014679, 	-0.013672, 	-0.011841, 	-0.009888, 
	-0.007721, 	-0.005921, 	-0.004425, 	-0.003357, 	-0.002991, 	-0.002899, 	-0.003052, 	-0.004212, 
	-0.005554, 	-0.007111, 	-0.008179, 	-0.008301, 	-0.006928, 	-0.004852, 	-0.003296, 	-0.002869, 
	-0.003906, 	-0.005280, 	-0.006470, 	-0.006165, 	-0.005188, 	-0.004791, 	-0.005127, 	-0.006684, 
	-0.008026, 	-0.009796, 	-0.010102, 	-0.009522, 	-0.007965, 	-0.007019, 	-0.007202, 	-0.008087, 
	-0.008972, 	-0.009491, 	-0.009339, 	-0.008454, 	-0.007111, 	-0.006439, 	-0.006409, 	-0.006836, 
	-0.006958, 	-0.006195, 	-0.004700, 	-0.003021, 	-0.001495, 	-0.000916, 	-0.001495, 	-0.002625, 
	-0.004273, 	-0.005280, 	-0.005341, 	-0.004364, 	-0.002930, 	-0.002472, 	-0.002625, 	-0.003693, 
	-0.005280, 	-0.006317, 	-0.006653, 	-0.006439, 	-0.006867, 	-0.008332, 	-0.010559, 	-0.013031, 
	-0.014893, 	-0.015168, 	-0.013825, 	-0.011048, 	-0.007843, 	-0.004700, 	-0.002441, 	-0.001007, 
	-0.000122, 	 0.000793, 	 0.001556, 	 0.001648, 	 0.001007, 	-0.000488, 	-0.002350, 	-0.003815, 
	-0.004242, 	-0.004151, 	-0.003632, 	-0.002411, 	-0.000946, 	 0.001068, 	 0.002472, 	 0.003327, 
	 0.003815, 	 0.004181, 	 0.003906, 	 0.002625, 	 0.000916, 	 0.000122, 	 0.000732, 	 0.002319, 
	 0.004975, 	 0.007111, 	 0.008484, 	 0.007660, 	 0.005554, 	 0.002472, 	-0.000061, 	-0.001434, 
	-0.000793, 	 0.001221, 	 0.003510, 	 0.005005, 	 0.005982, 	 0.007172, 	 0.008484, 	 0.009766, 
	 0.010102, 	 0.008881, 	 0.006897, 	 0.004730, 	 0.003571, 	 0.003601, 	 0.003693, 	 0.003357, 
	 0.002167, 	 0.001373, 	 0.001373, 	 0.002167, 	 0.003723, 	 0.005615, 	 0.007019, 	 0.008118, 
	 0.008240, 	 0.008484, 	 0.008728, 	 0.009339, 	 0.009796, 	 0.009583, 	 0.008850, 	 0.007141, 
	 0.005524, 	 0.004578, 	 0.004761, 	 0.005829, 	 0.006470, 	 0.006317, 	 0.004517, 	 0.002533, 
	 0.000855, 	 0.000671, 	 0.001495, 	 0.003357, 	 0.004852, 	 0.006043, 	 0.006195, 	 0.006653, 
	 0.006500, 	 0.006623, 	 0.006287, 	 0.005982, 	 0.006043, 	 0.006317, 	 0.007172, 	 0.007813, 
	 0.008087, 	 0.007691, 	 0.006653, 	 0.005493, 	 0.004425, 	 0.004151, 	 0.003876, 	 0.004151, 
	 0.004273, 	 0.005066, 	 0.006409, 	 0.008850, 	 0.011505, 	 0.013611, 	 0.014008, 	 0.012818, 
	 0.010254, 	 0.007874, 	 0.006348, 	 0.006989, 	 0.008576, 	 0.010315, 	 0.010437, 	 0.008911, 
	 0.006104, 	 0.003388, 	 0.001648, 	 0.000946, 	 0.001862, 	 0.003174, 	 0.004028, 	 0.003845, 
	 0.003693, 	 0.003754, 	 0.005371, 	 0.007080, 	 0.009217, 	 0.010437, 	 0.010651, 	 0.010010, 
	 0.008423, 	 0.007233, 	 0.006500, 	 0.006897, 	 0.008606, 	 0.010804, 	 0.012482, 	 0.012329, 
	 0.010285, 	 0.007294, 	 0.004608, 	 0.002991, 	 0.003021, 	 0.003845, 	 0.004791, 	 0.004913, 
	 0.004334, 	 0.003815, 	 0.004151, 	 0.005402, 	 0.007538, 	 0.009125, 	 0.009552, 	 0.008240, 
	 0.005860, 	 0.003479, 	 0.002228, 	 0.002533, 	 0.004089, 	 0.005860, 	 0.007447, 	 0.007599, 
	 0.007477, 	 0.006439, 	 0.005615, 	 0.004944, 	 0.004578, 	 0.004059, 	 0.003449, 	 0.003479, 
	 0.003906, 	 0.004913, 	 0.005860, 	 0.006867, 	 0.007263, 	 0.007721, 	 0.007874, 	 0.008545, 
	 0.009186, 	 0.010102, 	 0.010743, 	 0.010651, 	 0.010559, 	 0.010224, 	 0.010620, 	 0.010681, 
	 0.010620, 	 0.010315, 	 0.009400, 	 0.009003, 	 0.008789, 	 0.009522, 	 0.010193, 	 0.010620, 
	 0.010315, 	 0.009613, 	 0.008209, 	 0.007080, 	 0.006195, 	 0.005737, 	 0.005493, 	 0.005280, 
	 0.005402, 	 0.005463, 	 0.005310, 	 0.005310, 	 0.005127, 	 0.005036, 	 0.004730, 	 0.004975, 
	 0.005219, 	 0.006012, 	 0.006958, 	 0.007874, 	 0.008850, 	 0.008972, 	 0.008667, 	 0.007904, 
	 0.006897, 	 0.005951, 	 0.005188, 	 0.004639, 	 0.004242, 	 0.003632, 	 0.003449, 	 0.003143, 
	 0.003235, 	 0.003449, 	 0.003754, 	 0.003937, 	 0.004395, 	 0.004303, 	 0.004364, 	 0.003754, 
	 0.003510, 	 0.003174, 	 0.003357, 	 0.004059, 	 0.005371, 	 0.006470, 	 0.006806, 	 0.005921, 
	 0.004456, 	 0.002564, 	 0.001526, 	 0.001038, 	 0.002045, 	 0.003143, 	 0.004181, 	 0.004181, 
	 0.003662, 	 0.002686, 	 0.002319, 	 0.002716, 	 0.003845, 	 0.005310, 	 0.006561, 	 0.007050, 
	 0.006836, 	 0.005310, 	 0.003754, 	 0.002106, 	 0.001709, 	 0.001953, 	 0.003357, 	 0.004273, 
	 0.004395, 	 0.002686, 	-0.000153, 	-0.002594, 	-0.004089, 	-0.004242, 	-0.003174, 	-0.002014, 
	-0.001221, 	-0.002289, 	-0.003845, 	-0.006104, 	-0.007080, 	-0.007111, 	-0.005737, 	-0.004089, 
	-0.003082, 	-0.003265, 	-0.004486, 	-0.005127, 	-0.004761, 	-0.002991, 	-0.000916, 	 0.000855, 
	 0.000824, 	-0.000824, 	-0.003235, 	-0.005432, 	-0.006775, 	-0.007355, 	-0.007263, 	-0.006287, 
	-0.005249, 	-0.004608, 	-0.004486, 	-0.005066, 	-0.005799, 	-0.006806, 	-0.007202, 	-0.006684, 
	-0.005310, 	-0.003357, 	-0.001556, 	-0.000855, 	-0.001282, 	-0.002838, 	-0.004486, 	-0.005676, 
	-0.006378, 	-0.006287, 	-0.006012, 	-0.005432, 	-0.005341, 	-0.005219, 	-0.005432, 	-0.005280, 
	-0.005127, 	-0.005066, 	-0.005188, 	-0.005768, 	-0.006317, 	-0.006806, 	-0.007019, 	-0.006317, 
	-0.005524, 	-0.004761, 	-0.004639, 	-0.004639, 	-0.004578, 	-0.004242, 	-0.003906, 	-0.004273, 
	-0.004639, 	-0.005127, 	-0.004578, 	-0.003143, 	-0.000702, 	 0.001373, 	 0.002350, 	 0.001770, 
	-0.000336, 	-0.002899, 	-0.004608, 	-0.005097, 	-0.004120, 	-0.003662, 	-0.003754, 	-0.005432, 
	-0.007385, 	-0.008942, 	-0.008484, 	-0.006409, 	-0.003876, 	-0.002258, 	-0.002716, 	-0.004242, 
	-0.006867, 	-0.007935, 	-0.008026, 	-0.006806, 	-0.005615, 	-0.005005, 	-0.005432, 	-0.006470, 
	-0.007752, 	-0.008179, 	-0.007569, 	-0.005921, 	-0.003815, 	-0.001801, 	-0.000458, 	-0.000092, 
	-0.000946, 	-0.002564, 	-0.004608, 	-0.006378, 	-0.007447, 	-0.007141, 	-0.005982, 	-0.004578, 
	-0.003998, 	-0.003815, 	-0.004364, 	-0.004578, 	-0.004364, 	-0.003235, 	-0.001953, 	-0.001282, 
	-0.001953, 	-0.003601, 	-0.005524, 	-0.006409, 	-0.005737, 	-0.003540, 	-0.001099, 	 0.000000, 
	-0.000732, 	-0.002899, 	-0.005768, 	-0.007843, 	-0.008911, 	-0.008209, 	-0.006439, 	-0.004486, 
	-0.002777, 	-0.001434, 	-0.000397, 	 0.000336, 	 0.000732, 	 0.000855, 	 0.001007, 	 0.000916, 
	 0.000946, 	 0.000732, 	 0.000183, 	-0.000977, 	-0.001923, 	-0.002380, 	-0.002014, 	-0.001556, 
	-0.000732, 	-0.000366, 	 0.000061, 	-0.000549, 	-0.001221, 	-0.002258, 	-0.002716, 	-0.002472, 
	-0.001984, 	-0.000977, 	-0.000702, 	-0.000061, 	-0.000336, 	-0.000488, 	-0.001221, 	-0.001831, 
	-0.002625, 	-0.003754, 	-0.004578, 	-0.004883, 	-0.004273, 	-0.003204, 	-0.001892, 	-0.001221, 
	-0.001129, 	-0.001862, 	-0.002594, 	-0.003296, 	-0.003418, 	-0.003021, 	-0.002503, 	-0.002472, 
	-0.002869, 	-0.003540, 	-0.004059, 	-0.003906, 	-0.003510, 	-0.002899, 	-0.003143, 	-0.003754, 
	-0.004791, 	-0.004975, 	-0.004822, 	-0.003754, 	-0.002930, 	-0.001984, 	-0.001953, 	-0.002045, 
	-0.002228, 	-0.002045, 	-0.002045, 	-0.002258, 	-0.002991, 	-0.003510, 	-0.003998, 	-0.003998, 
	-0.003357, 	-0.002838, 	-0.002289, 	-0.002075, 	-0.002014, 	-0.002075, 	-0.002380, 	-0.002655, 
	-0.002411, 	-0.002014, 	-0.001587, 	-0.001221, 	-0.000885, 	-0.000671, 	-0.000488, 	-0.000214, 
	-0.000153, 	-0.000275, 	-0.000519, 	-0.000702, 	-0.000519, 	 0.000061, 	 0.000488, 	 0.001251, 
	 0.001587, 	 0.001282, 	 0.000366, 	-0.000885, 	-0.002228, 	-0.003998, 	-0.005127, 	-0.006256, 
	-0.006073, 	-0.005768, 	-0.005158, 	-0.004608, 	-0.004273, 	-0.003906, 	-0.003265, 	-0.003082, 
	-0.002625, 	-0.003174, 	-0.003418, 	-0.003723, 	-0.003418, 	-0.003082, 	-0.002197, 	-0.001617, 
	-0.001190, 	-0.001495, 	-0.002411, 	-0.002960, 	-0.002991, 	-0.002350, 	-0.001495, 	-0.001221, 
	-0.001556, 	-0.001953, 	-0.002441, 	-0.002106, 	-0.001251, 	 0.000122, 	 0.001160, 	 0.001251, 
	 0.000671, 	-0.000275, 	-0.001190, 	-0.001831, 	-0.001648, 	-0.001160, 	-0.000092, 	 0.000519, 
	 0.000549, 	 0.000305, 	-0.000580, 	-0.001068, 	-0.001007, 	-0.000183, 	 0.001190, 	 0.001953, 
	 0.002014, 	 0.001587, 	 0.000946, 	 0.001129, 	 0.001923, 	 0.003449, 	 0.004883, 	 0.005371, 
	 0.004639, 	 0.003357, 	 0.001984, 	 0.001465, 	 0.001526, 	 0.002411, 	 0.003235, 	 0.004456, 
	 0.004975, 	 0.005249, 	 0.005097, 	 0.004669, 	 0.004059, 	 0.002930, 	 0.002136, 	 0.001373, 
	 0.001129, 	 0.000427, 	-0.000183, 	-0.000855, 	-0.001404, 	-0.001740, 	-0.001465, 	-0.000641, 
	 0.000488, 	 0.001373, 	 0.001282, 	 0.000946, 	 0.001160, 	 0.002106, 	 0.003693, 	 0.004700, 
	 0.005127, 	 0.004547, 	 0.003327, 	 0.002197, 	 0.001343, 	 0.001556, 	 0.001679, 	 0.002167, 
	 0.002075, 	 0.002411, 	 0.002716, 	 0.003327, 	 0.003906, 	 0.004547, 	 0.004852, 	 0.005249, 
	 0.005768, 	 0.006012, 	 0.006012, 	 0.005158, 	 0.004517, 	 0.004028, 	 0.004089, 	 0.004547, 
	 0.005280, 	 0.005982, 	 0.006195, 	 0.005951, 	 0.005005, 	 0.003784, 	 0.002441, 	 0.001404, 
	 0.001190, 	 0.001282, 	 0.001801, 	 0.002228, 	 0.002106, 	 0.002258, 	 0.002350, 	 0.003113, 
	 0.003479, 	 0.004547, 	 0.004944, 	 0.005097, 	 0.004028, 	 0.002350, 	 0.000519, 	-0.000397, 
	-0.000488, 	 0.000885, 	 0.002441, 	 0.003876, 	 0.004578, 	 0.004517, 	 0.003723, 	 0.002960, 
	 0.002136, 	 0.002350, 	 0.002686, 	 0.003662, 	 0.004303, 	 0.004761, 	 0.004517, 	 0.003845, 
	 0.003204, 	 0.003235, 	 0.004028, 	 0.005432, 	 0.006592, 	 0.006592, 	 0.005036, 	 0.002899, 
	 0.000641, 	-0.000488, 	-0.000519, 	 0.000397, 	 0.001770, 	 0.002441, 	 0.002838, 	 0.002564, 
	 0.002533, 	 0.002106, 	 0.001434, 	 0.000916, 	 0.000946, 	 0.001556, 	 0.002441, 	 0.003357, 
	 0.004089, 	 0.004212, 	 0.003937, 	 0.003632, 	 0.003845, 	 0.004151, 	 0.004517, 	 0.004120, 
	 0.003143, 	 0.001587, 	 0.000214, 	-0.000275, 	 0.000732, 	 0.001984, 	 0.003204, 	 0.003937, 
	 0.004028, 	 0.003479, 	 0.002808, 	 0.002289, 	 0.002350, 	 0.002106, 	 0.002014, 	 0.001770, 
	 0.001892, 	 0.001953, 	 0.001373, 	 0.000580, 	-0.000244, 	-0.000397, 	 0.000031, 	 0.001068, 
	 0.002258, 	 0.002960, 	 0.002686, 	 0.002075, 	 0.000946, 	 0.000732, 	 0.001251, 	 0.002777, 
	 0.004456, 	 0.005493, 	 0.005768, 	 0.005158, 	 0.003540, 	 0.001892, 	 0.000153, 	-0.000458, 
	-0.000397, 	 0.000427, 	 0.001801, 	 0.003235, 	 0.004730, 	 0.005493, 	 0.005768, 	 0.005127, 
	 0.004028, 	 0.002258, 	 0.000671, 	-0.000366, 	-0.000397, 	 0.000214, 	 0.000610, 	 0.000855, 
	 0.000793, 	 0.000885, 	 0.001038, 	 0.001068, 	 0.000732, 	-0.000336, 	-0.001770, 	-0.002716, 
	-0.002747, 	-0.001312, 	 0.000916, 	 0.003418, 	 0.004883, 	 0.004944, 	 0.003479, 	 0.001373, 
	-0.000702, 	-0.001679, 	-0.001404, 	-0.000549, 	 0.000275,   0.000458, 	-0.000671, 	-0.001251, 
	-0.001404, 	-0.000824, 	-0.000855, 	-0.000885, 	-0.001129, 	-0.001251, 	-0.001038, 	-0.001038, 
	-0.000549, 	 0.000427, 	 0.001556, 	 0.002258, 	 0.002136, 	 0.001526, 	 0.000549, 	-0.000824, 
	-0.001617, 	-0.001862, 	-0.000977, 	-0.000214, 	 0.001099, 	 0.001556, 	 0.002228, 	 0.001556, 
	 0.000793, 	-0.000458, 	-0.001190, 	-0.001556, 	-0.000916, 	 0.000061, 	 0.000946, 	 0.000488, 
	-0.000732, 	-0.002472, 	-0.003845, 	-0.004975, 	-0.005158, 	-0.004578, 	-0.003418, 	-0.002350, 
	-0.001801, 	-0.001923, 	-0.002472, 	-0.003082, 	-0.003815, 	-0.004242, 	-0.004089, 	-0.003174, 
	-0.002167, 	-0.000793, 	-0.000366, 	 0.000061, 	-0.000519, 	-0.000671, 	-0.000671, 	 0.000031, 
	 0.000732, 	 0.000702, 	 0.000061, 	-0.001068, 	-0.001587, 	-0.001129, 	-0.000336, 	 0.001160, 
	 0.001892, 	 0.001892, 	 0.000732, 	-0.000580, 	-0.001404, 	-0.001373, 	-0.000732, 	-0.000549, 
	-0.001160, 	-0.002869, 	-0.004364, 	-0.005402, 	-0.005066, 	-0.003632, 	-0.001404, 	 0.000275, 
	 0.000946, 	-0.000336, 	-0.002747, 	-0.004852, 	-0.006470, 	-0.006500, 	-0.005829, 	-0.004120, 
	-0.002319, 	-0.000702, 	 0.000366, 	 0.000641, 	 0.000305, 	-0.000336, 	-0.000793, 	-0.000885, 
	-0.000427, 	-0.000122, 	 0.000092, 	-0.000458, 	-0.001007, 	-0.001373, 	-0.001648, 	-0.001068, 
	-0.000641, 	 0.000214, 	 0.000427, 	 0.000153, 	-0.000824, 	-0.001740, 	-0.002564, 	-0.003143, 
	-0.003235, 	-0.003143, 	-0.002350, 	-0.001221, 	-0.000061, 	 0.000977, 	 0.001495, 	 0.001343, 
	 0.000580, 	-0.000580, 	-0.001862, 	-0.002960, 	-0.004151, 	-0.004700, 	-0.005066, 	-0.004334, 
	-0.003571, 	-0.002808, 	-0.002136, 	-0.001831, 	-0.001648, 	-0.001740, 	-0.001831, 	-0.001404, 
	-0.001282, 	-0.000732, 	-0.001007, 	-0.000855, 	-0.000763, 	-0.000580, 	-0.000366, 	-0.000946, 
	-0.001770, 	-0.002930, 	-0.003418, 	-0.002991, 	-0.002075, 	-0.001007, 	-0.001099, 	-0.001648, 
	-0.003174, 	-0.004334, 	-0.004852, 	-0.003754, 	-0.001831, 	 0.000702, 	 0.002411, 	 0.003418, 
	 0.002930, 	 0.001862, 	 0.000610, 	-0.000366, 	-0.000824, 	-0.000610, 	-0.000305, 	 0.000092, 
	-0.000519, 	-0.001129, 	-0.001984, 	-0.002045, 	-0.001373, 	-0.000061, 	 0.001129, 	 0.001495, 
	 0.000916, 	-0.000427, 	-0.001923, 	-0.002625, 	-0.002441, 	-0.001648, 	-0.001007, 	-0.001160, 
	-0.001617, 	-0.001923, 	-0.001892, 	-0.001251, 	-0.000763, 	-0.000336, 	-0.000458, 	-0.001465, 
	-0.002838, 	-0.004456, 	-0.004669, 	-0.004120, 	-0.002503, 	-0.001495, 	-0.000397, 	-0.000519, 
	-0.001404, 	-0.003601, 	-0.005127, 	-0.006287, 	-0.005737, 	-0.004273, 	-0.002106, 	-0.000336, 
	 0.000671, 	 0.000855, 	 0.000427, 	-0.000122, 	-0.000977, 	-0.001007, 	-0.001404, 	-0.001587, 
	-0.002503, 	-0.003418, 	-0.003662, 	-0.003449, 	-0.002716, 	-0.001831, 	-0.000946, 	-0.000732, 
	-0.001190, 	-0.001892, 	-0.002319, 	-0.002228, 	-0.001740, 	-0.001465, 	-0.001679, 	-0.002411, 
	-0.003479, 	-0.004059, 	-0.003998, 	-0.002869, 	-0.001068, 	 0.000793, 	 0.002075, 	 0.002075, 
	 0.000946, 	-0.000855, 	-0.002564, 	-0.003723, 	-0.003784, 	-0.002899, 	-0.001465, 	-0.000610, 
	-0.000061, 	-0.000275, 	-0.000946, 	-0.002014, 	-0.003540, 	-0.004486, 	-0.005127, 	-0.005066, 
	-0.004639, 	-0.003815, 	-0.003021, 	-0.002106, 	-0.001709, 	-0.001617, 	-0.001617, 	-0.001984, 
	-0.001617, 	-0.001221, 	-0.000641, 	-0.000305, 	-0.000061, 	 0.000061, 	 0.000122, 	 0.000000, 
	 0.000061, 	 0.000366, 	 0.000763, 	 0.001038, 	 0.001160, 	 0.001282, 	 0.001434, 	 0.001404, 
	 0.000610, 	-0.000061, 	-0.000427, 	-0.000061, 	 0.000549, 	 0.001373, 	 0.002289, 	 0.002838, 
	 0.003265, 	 0.002899, 	 0.002197, 	 0.001129, 	 0.000031, 	-0.000549, 	-0.000793, 	-0.000366, 
	 0.000214, 	 0.000397, 	-0.000366, 	-0.001556, 	-0.002625, 	-0.002838, 	-0.001801, 	-0.000214, 
	 0.001404, 	 0.002472, 	 0.002960, 	 0.003052, 	 0.002625, 	 0.002380, 	 0.002380, 	 0.002777, 
	 0.003357, 	 0.003113, 	 0.002930, 	 0.002441, 	 0.002564, 	 0.002503, 	 0.002289, 	 0.001770, 
	 0.000732, 	-0.000397, 	-0.001495, 	-0.001129, 	-0.000183, 	 0.001984, 	 0.003174, 	 0.004089, 
	 0.003723, 	 0.002869, 	 0.001465, 	 0.000366, 	-0.000427, 	-0.000549, 	-0.000244, 	 0.000702, 
	 0.001495, 	 0.001953, 	 0.001373, 	 0.000519, 	-0.001129, 	-0.002106, 	-0.002350, 	-0.001129, 
	 0.000793, 	 0.002503, 	 0.003510, 	 0.003479, 	 0.002411, 	 0.001007, 	-0.000397, 	-0.000702, 
	-0.000458, 	 0.000092, 	 0.000092, 	-0.000366, 	-0.000763, 	-0.000702, 	 0.000153, 	 0.001740, 
	 0.003143, 	 0.003327, 	 0.002136, 	 0.000214, 	-0.001709, 	-0.002075, 	-0.001251, 	 0.001221, 
	 0.003296, 	 0.005188, 	 0.005829, 	 0.005707, 	 0.004608, 	 0.002930, 	 0.000946, 	-0.000732, 
	-0.001495, 	-0.001190, 	 0.000702, 	 0.002899, 	 0.004852, 	 0.005463, 	 0.004761, 	 0.003571, 
	 0.002075, 	 0.001984, 	 0.002289, 	 0.003113, 	 0.003357, 	 0.003662, 	 0.003479, 	 0.003662, 
	 0.003784, 	 0.004669, 	 0.005310, 	 0.005310, 	 0.004517, 	 0.003357, 	 0.001923, 	 0.000549, 
	-0.000763, 	-0.001709, 	-0.001801, 	-0.001221, 	-0.000214, 	 0.001282, 	 0.002991, 	 0.004639, 
	 0.005615, 	 0.005646, 	 0.004608, 	 0.002350, 	 0.000244, 	-0.000275, 	 0.000885, 	 0.003327, 
	 0.005280, 	 0.006470, 	 0.005951, 	 0.004425, 	 0.002686, 	 0.001862, 	 0.002777, 	 0.004334, 
	 0.006409, 	 0.007752, 	 0.008118, 	 0.007752, 	 0.006531, 	 0.005493, 	 0.003937, 	 0.003388, 
	 0.003449, 	 0.004120, 	 0.004730, 	 0.004578, 	 0.003906, 	 0.002991, 	 0.002014, 	 0.001526, 
	 0.001160, 	 0.001221, 	 0.001282, 	 0.001282, 	 0.000885, 	 0.000702, 	 0.000824, 	 0.001343, 
	 0.001953, 	 0.002228, 	 0.002441, 	 0.002045, 	 0.001282, 	 0.000519, 	 0.000183, 	 0.000000, 
	-0.000244, 	-0.000244, 	 0.000122, 	 0.000427, 	 0.000671, 	 0.000702, 	 0.001251, 	 0.001373, 
	 0.001862, 	 0.001495, 	 0.001099, 	 0.000946, 	 0.001465, 	 0.002716, 	 0.003662, 	 0.004059, 
	 0.003113, 	 0.001465, 	-0.000122, 	-0.000824, 	-0.000397, 	 0.001251, 	 0.003296, 	 0.004456, 
	 0.004151, 	 0.002075, 	-0.000122, 	-0.002197, 	-0.002838, 	-0.002411, 	-0.000671, 	 0.000549, 
	 0.001282, 	 0.001343, 	 0.001129, 	 0.001129, 	 0.001068, 	 0.001038, 	 0.000855, 	 0.000702, 
	 0.000885, 	 0.001373, 	 0.002045, 	 0.002899, 	 0.003021, 	 0.002289, 	 0.000214, 	-0.001953, 
	-0.003876, 	-0.004608, 	-0.004120, 	-0.002869, 	-0.001312, 	-0.000458, 	-0.000610, 	-0.001282, 
	-0.002441, 	-0.003357, 	-0.003723, 	-0.003143, 	-0.002228, 	-0.001373, 	-0.000824, 	-0.000641, 
	-0.000488, 	-0.000153, 	 0.000488, 	 0.000977, 	 0.001068, 	 0.000702, 	-0.000275, 	-0.001465, 
	-0.002503, 	-0.002899, 	-0.002289, 	-0.001373, 	-0.000153, 	 0.000336, 	 0.000183, 	-0.000702, 
	-0.001679, 	-0.002503, 	-0.002594, 	-0.002716, 	-0.002411, 	-0.002441, 	-0.002564, 	-0.002808, 
	-0.003113, 	-0.003143, 	-0.003357, 	-0.002899, 	-0.002228, 	-0.001099, 	-0.000366, 	 0.000122, 
	-0.000061, 	-0.001099, 	-0.002411, 	-0.004059, 	-0.005005, 	-0.005036, 	-0.004883, 	-0.003693, 
	-0.002472, 	-0.001556, 	-0.001221, 	-0.002075, 	-0.002716, 	-0.003632, 	-0.004120, 	-0.004303, 
	-0.003693, 	-0.002411, 	-0.000702, 	 0.000549, 	 0.001434, 	 0.001373, 	 0.001160, 	 0.000244, 
	-0.000214, 	-0.000427, 	-0.000427, 	-0.000702, 	-0.001282, 	-0.002258, 	-0.003174, 	-0.003876, 
	-0.003845, 	-0.003021, 	-0.002228, 	-0.001282, 	-0.001007, 	-0.000641, 	-0.001038, 	-0.001465, 
	-0.002014, 	-0.002350, 	-0.002533, 	-0.002991, 	-0.002777, 	-0.002045, 	-0.000793, 	 0.000153, 
	 0.000427, 	-0.000214, 	-0.000916, 	-0.001892, 	-0.001923, 	-0.001587, 	-0.001007, 	-0.001007, 
	-0.002106, 	-0.003479, 	-0.004578, 	-0.004730, 	-0.003540, 	-0.002350, 	-0.000488, 	 0.000336, 
	 0.000671, 	 0.000092, 	-0.000610, 	-0.000824, 	-0.000610, 	 0.000366, 	 0.000946, 	 0.001679, 
	 0.001465, 	 0.001556, 	 0.000916, 	 0.000427, 	 0.000183, 	 0.000092, 	 0.000153, 	-0.000427, 
	-0.001190, 	-0.002380, 	-0.003357, 	-0.003967, 	-0.004639, 	-0.004791, 	-0.004852, 	-0.004517, 
	-0.003906, 	-0.003327, 	-0.002319, 	-0.001251, 	-0.000610, 	-0.000793, 	-0.001373, 	-0.002136, 
	-0.002747, 	-0.002808, 	-0.002380, 	-0.001740, 	-0.001404, 	-0.001251, 	-0.001648, 	-0.002258, 
	-0.002899, 	-0.003174, 	-0.002869, 	-0.002380, 	-0.001282, 	-0.000183, 	 0.000885, 	 0.001099, 
	 0.000977, 	 0.000885, 	 0.000488, 	 0.001038, 	 0.001404, 	 0.002380, 	 0.002594, 	 0.002380, 
	 0.001526, 	 0.000610, 	 0.000427, 	 0.000549, 	 0.000916, 	 0.000855, 	 0.000488, 	-0.000092, 
	-0.000214, 	 0.000122, 	 0.000793, 	 0.001709, 	 0.001984, 	 0.002045, 	 0.001099, 	 0.000671, 
	-0.000122, 	-0.000214, 	-0.000824, 	-0.000977, 	-0.001373, 	-0.001190, 	-0.000946, 	-0.000488, 
	-0.000122, 	-0.000153, 	-0.000397, 	-0.000916, 	-0.001129, 	-0.000916, 	-0.000427, 	-0.000122, 
	-0.000214, 	-0.000610, 	-0.001007, 	-0.001251, 	-0.001221, 	-0.000855, 	-0.000855, 	-0.000519, 
	-0.001099, 	-0.001251, 	-0.001740, 	-0.001648, 	-0.001953, 	-0.002014, 	-0.002533, 	-0.002289, 
	-0.002045, 	-0.000885, 	-0.000214, 	 0.000580, 	 0.000061, 	-0.000610, 	-0.001892, 	-0.002441, 
	-0.002350, 	-0.001617, 	-0.000336, 	 0.000214, 	 0.000732, 	 0.000336, 	 0.000458, 	 0.000610, 
	 0.001190, 	 0.001984, 	 0.002258, 	 0.002075, 	 0.001343, 	 0.000885, 	 0.000671, 	 0.000946, 
	 0.001373, 	 0.001770, 	 0.001617, 	 0.001282, 	 0.000427, 	 0.000061, 	-0.000366, 	-0.000580, 
	-0.000855, 	-0.001129, 	-0.000824, 	-0.000427, 	 0.000671, 	 0.001404, 	 0.002228, 	 0.002167, 
	 0.001862, 	 0.001068, 	 0.000458, 	-0.000092, 	-0.000519, 	-0.000366, 	-0.000519, 	-0.000305, 
	-0.000671, 	-0.001038, 	-0.001740, 	-0.002106, 	-0.002564, 	-0.002441, 	-0.002319, 	-0.001648, 
	-0.001282, 	-0.000824, 	-0.000946, 	-0.000885, 	-0.001129, 	-0.000977, 	-0.000885, 	-0.000214, 
	 0.000366, 	 0.001129, 	 0.001617, 	 0.001495, 	 0.000916, 	-0.000336, 	-0.001465, 	-0.002136, 
	-0.002136, 	-0.001404, 	-0.000855, 	-0.000458, 	-0.000458, 	-0.000519, 	-0.000305, 	 0.000092, 
	 0.000916, 	 0.001495, 	 0.002075, 	 0.001892, 	 0.001282, 	 0.000793, 	 0.000580, 	 0.000824, 
	 0.001465, 	 0.001953, 	 0.002716, 	 0.003388, 	 0.003906, 	 0.003632, 	 0.002777, 	 0.001099, 
	 0.000153, 	-0.000458, 	-0.000244, 	 0.000397, 	 0.001099, 	 0.001679, 	 0.001526, 	 0.000855, 
	 0.000183, 	 0.000000, 	 0.000488, 	 0.001129, 	 0.001801, 	 0.002350, 	 0.002258, 	 0.002106, 
	 0.001434, 	 0.000824, 	 0.000397, 	-0.000244, 	-0.000366, 	-0.000641, 	-0.000366, 	-0.000061, 
	 0.000122, 	 0.000336, 	 0.000366, 	 0.000549, 	 0.000610, 	 0.000946, 	 0.001160, 	 0.001434, 
	 0.001282, 	 0.000855, 	 0.000336, 	 0.000153, 	 0.000580, 	 0.001190, 	 0.001709, 	 0.001617, 
	 0.000641, 	 0.000275, 	 0.000122, 	 0.001068, 	 0.002075, 	 0.003113, 	 0.003479, 	 0.002991, 
	 0.001984, 	 0.001007, 	 0.000977, 	 0.001801, 	 0.003143, 	 0.004028, 	 0.004334, 	 0.003449, 
	 0.002380, 	 0.001343, 	 0.000549, 	 0.000946, 	 0.001495, 	 0.002319, 	 0.002747, 	 0.002075, 
	 0.001617, 	 0.000916, 	 0.000732, 	 0.000732, 	 0.001160, 	 0.001831, 	 0.002472, 	 0.002960, 
	 0.002838, 	 0.002716, 	 0.002258, 	 0.002045, 	 0.001862, 	 0.002197, 	 0.002533, 	 0.002899, 
	 0.002625, 	 0.002045, 	 0.001282, 	 0.000641, 	 0.000885, 	 0.001709, 	 0.002960, 	 0.003662, 
	 0.003418, 	 0.002716, 	 0.001251, 	 0.000061, 	-0.000458, 	 0.000031, 	 0.001495, 	 0.002930, 
	 0.003693, 	 0.003601, 	 0.002625, 	 0.001831, 	 0.001282, 	 0.001862, 	 0.002441, 	 0.003113, 
	 0.002899, 	 0.002564, 	 0.001923, 	 0.001526, 	 0.000946, 	 0.000824, 	 0.000397, 	 0.000000, 
	-0.000671, 	-0.001099, 	-0.001373, 	-0.001373, 	-0.001221, 	-0.000946, 	-0.000336, 	 0.000092, 
	 0.000855, 	 0.001465, 	 0.002045, 	 0.002136, 	 0.001587, 	 0.000977, 	 0.000214, 	-0.000244, 
	-0.000244, 	-0.000153, 	 0.000244, 	 0.000488, 	 0.000671, 	 0.000885, 	 0.000641, 	 0.000122, 
	-0.000397, 	-0.001099, 	-0.001068, 	-0.001129, 	-0.000641, 	 0.000061, 	 0.000244, 	 0.000458, 
	 0.000214, 	 0.000031, 	-0.000153, 	 0.000244, 	 0.000763, 	 0.001434, 	 0.001953, 	 0.001465, 
	 0.000763, 	-0.000580, 	-0.001495, 	-0.001373, 	-0.000702, 	 0.000793, 	 0.001617, 	 0.001587, 
	 0.000671, 	-0.000610, 	-0.001740, 	-0.001984, 	-0.001648, 	-0.000549, 	 0.000275, 	 0.000702, 
	 0.000427, 	-0.000214, 	-0.000916, 	-0.000946, 	-0.000763, 	 0.000244, 	 0.000977, 	 0.001526, 
	 0.001740, 	 0.001129, 	 0.000427, 	-0.000427, 	-0.001373, 	-0.001923, 	-0.002594, 	-0.002747, 
	-0.002625, 	-0.002106, 	-0.001740, 	-0.001495, 	-0.001923, 	-0.002197, 	-0.002655, 	-0.002747, 
	-0.002808, 	-0.002899, 	-0.002869, 	-0.002808, 	-0.002411, 	-0.001679, 	-0.000763, 	 0.000153, 
	 0.000519, 	 0.000366, 	-0.000549, 	-0.000946, 	-0.001251, 	-0.001038, 	-0.000824, 	-0.000702, 
	-0.000855, 	-0.001679, 	-0.002380, 	-0.002838, 	-0.002411, 	-0.001740, 	-0.001129, 	-0.000885, 
	-0.000946, 	-0.000855, 	-0.000763, 	-0.000641, 	-0.000641, 	-0.000702, 	-0.000977, 	-0.001251, 
	-0.001404, 	-0.001373, 	-0.000671, 	-0.000122, 	 0.000275, 	 0.000031, 	-0.000610, 	-0.000977, 
	-0.001129, 	-0.000732, 	-0.000397, 	-0.000214, 	-0.000244, 	-0.000641, 	-0.000641, 	-0.000671, 
	-0.000122, 	 0.000061, 	 0.000244, 	-0.000427, 	-0.000977, 	-0.001770, 	-0.001709, 	-0.001465, 
	-0.000641, 	-0.000488, 	-0.000610, 	-0.001373, 	-0.002045, 	-0.002319, 	-0.001801, 	-0.001007, 
	-0.000153, 	-0.000122, 	-0.000458, 	-0.001923, 	-0.002838, 	-0.004089, 	-0.004089, 	-0.003571, 
	-0.002411, 	-0.001007, 	 0.000031, 	 0.000671, 	 0.000671, 	 0.000153, 	-0.000336, 	-0.000580, 
	-0.000305, 	-0.000061, 	 0.000275, 	 0.000244, 	 0.000336, 	 0.000519, 	 0.000671, 	 0.001190, 
	 0.001007, 	 0.000855, 	 0.000092, 	-0.000671, 	-0.001038, 	-0.001251, 	-0.000732, 	-0.000458, 
	-0.000214, 	-0.000641, 	-0.001282, 	-0.001801, 	-0.002075, 	-0.001862, 	-0.001373, 	-0.000732, 
	-0.000488, 	-0.000305, 	-0.000916, 	-0.001434, 	-0.002045, 	-0.002014, 	-0.001434, 	-0.000824, 
	-0.000397, 	-0.000366, 	-0.000641, 	-0.000946, 	-0.001129, 	-0.000885, 	-0.000305, 	 0.000031, 
	 0.000671, 	 0.000305, 	 0.000061, 	-0.000763, 	-0.000977, 	-0.000763, 	-0.000366, 	 0.000305, 
	 0.000183, 	 0.000183, 	-0.000305, 	-0.000397, 	-0.000244, 	 0.000092, 	 0.000336, 	 0.000427, 
	 0.000244, 	-0.000427, 	-0.001099, 	-0.001892, 	-0.002106, 	-0.002167, 	-0.001923, 	-0.001282, 
	-0.000916, 	-0.000336, 	-0.000366, 	-0.000366, 	-0.000824, 	-0.001312, 	-0.001801, 	-0.002350, 
	-0.002838, 	-0.003296, 	-0.003357, 	-0.003235, 	-0.002716, 	-0.002533, 	-0.002228, 	-0.002258, 
	-0.002319, 	-0.002319, 	-0.002167, 	-0.001831, 	-0.001892, 	-0.001801, 	-0.001984, 	-0.001953, 
	-0.001923, 	-0.001648, 	-0.001495, 	-0.001434, 	-0.001679, 	-0.002045, 	-0.002380, 	-0.002106, 
	-0.001984, 	-0.001434, 	-0.001221, 	-0.001099, 	-0.001190, 	-0.001221, 	-0.001221, 	-0.000610, 
	 0.000122, 	 0.000885, 	 0.001221, 	 0.001190, 	 0.001068, 	 0.001129, 	 0.001282, 	 0.001648, 
	 0.001709, 	 0.001587, 	 0.001160, 	 0.000824, 	 0.000671, 	 0.000732, 	 0.000977, 	 0.001465, 
	 0.001556, 	 0.001465, 	 0.001251, 	 0.000793, 	 0.000549, 	 0.000000, 	-0.000305, 	-0.000671, 
	-0.000488, 	-0.000458, 	 0.000000, 	 0.000031, 	 0.000061, 	-0.000458, 	-0.000488, 	-0.000763, 
	-0.000397, 	 0.000061, 	 0.000702, 	 0.001434, 	 0.001709, 	 0.001831, 	 0.001617, 	 0.000977, 
	 0.000519, 	 0.000061, 	-0.000122, 	-0.000244, 	-0.000366, 	-0.000397, 	-0.000458, 	-0.000549, 
	-0.000549, 	-0.000305, 	 0.000092, 	 0.000610, 	 0.001099, 	 0.001770, 	 0.002045, 	 0.002594, 
	 0.002472, 	 0.002960, 	 0.002625, 	 0.002686, 	 0.001923, 	 0.001282, 	 0.000458, 	-0.000061, 
	-0.000275, 	 0.000244, 	 0.001160, 	 0.002472, 	 0.003357, 	 0.003571, 	 0.003052, 	 0.002228, 
	 0.001556, 	 0.001526, 	 0.001770, 	 0.002167, 	 0.002472, 	 0.002228, 	 0.002380, 	 0.002197, 
	 0.002228, 	 0.001343, 	 0.000183, 	-0.001099, 	-0.001526, 	-0.000763, 	 0.000732, 	 0.002686, 
	 0.003754, 	 0.004059, 	 0.003113, 	 0.002136, 	 0.000946, 	 0.000702, 	 0.000732, 	 0.001251, 
	 0.001526, 	 0.001465, 	 0.001129, 	 0.000397, 	 0.000122, 	-0.000366, 	-0.000122, 	-0.000153, 
	 0.000183, 	 0.000214, 	 0.000610, 	 0.001068, 	 0.001617, 	 0.002167, 	 0.002228, 	 0.002380, 
	 0.001953, 	 0.001892, 	 0.001404, 	 0.001434, 	 0.001129, 	 0.000885, 	 0.000671, 	 0.000549, 
	 0.000732, 	 0.000916, 	 0.000732, 	 0.000702, 	 0.000336, 	 0.000061, 	-0.000183, 	-0.000366, 
	 0.000000, 	 0.000610, 	 0.001129, 	 0.001801, 	 0.001801, 	 0.001953, 	 0.001465, 	 0.001282, 
	 0.001160, 	 0.001495, 	 0.002197, 	 0.002777, 	 0.003235, 	 0.003113, 	 0.002533, 	 0.001709, 
	 0.000855, 	 0.000305, 	 0.000244, 	 0.000366, 	 0.000855, 	 0.001099, 	 0.001434, 	 0.001251, 
	 0.001129, 	 0.000946, 	 0.001068, 	 0.001434, 	 0.001862, 	 0.002228, 	 0.002258, 	 0.002075, 
	 0.001343, 	 0.000732, 	 0.000092, 	-0.000153, 	-0.000427, 	-0.000244, 	-0.000519, 	 0.000061, 
	 0.000366, 	 0.001038, 	 0.001099, 	 0.000977, 	 0.000610, 	 0.000427, 	 0.000580, 	 0.001038, 
	 0.001587, 	 0.002106, 	 0.001679, 	 0.000885, 	-0.000397, 	-0.001312, 	-0.001434, 	-0.000824, 
	 0.000214, 	 0.001129, 	 0.001648, 	 0.001373, 	 0.001068, 	 0.000488, 	 0.000488, 	 0.000702, 
	 0.001038, 	 0.001373, 	 0.001160, 	 0.000793, 	 0.000305, 	 0.000214, 	 0.000183, 	 0.000366, 
	 0.000427, 	 0.000214, 	-0.000122, 	-0.000885, 	-0.001373, 	-0.001862, 	-0.001984, 	-0.001862, 
	-0.001282, 	-0.000366, 	 0.000702, 	 0.001404, 	 0.001526, 	 0.001190, 	 0.000488, 	-0.000061, 
	-0.000458, 	-0.000549, 	-0.000153, 	-0.000275, 	-0.000122, 	-0.000916, 	-0.001282, 	-0.001679, 
	-0.001221, 	-0.000305, 	 0.000732, 	 0.001434, 	 0.001495, 	 0.000793, 	 0.000061, 	-0.000977, 
	-0.000916, 	-0.001007, 	-0.000397, 	 0.000336, 	 0.000671, 	 0.000824, 	 0.000214, 	-0.000610, 
	-0.001373, 	-0.001556, 	-0.001007, 	 0.000061, 	 0.000946, 	 0.001373, 	 0.000885, 	 0.000244, 
	-0.000824, 	-0.001160, 	-0.001221, 	-0.000793, 	-0.000305, 	-0.000244, 	-0.000702, 	-0.001007, 
	-0.001740, 	-0.001648, 	-0.001434, 	-0.000885, 	-0.000305, 	 0.000061, 	 0.000031, 	-0.000153, 
	-0.000824, 	-0.001190, 	-0.001465, 	-0.001434, 	-0.001373, 	-0.000977, 	-0.000977, 	-0.000977, 
	-0.001312, 	-0.001679, 	-0.001709, 	-0.001831, 	-0.001679, 	-0.001434, 	-0.001373, 	-0.001587, 
	-0.001953, 	-0.002319, 	-0.002319, 	-0.001923, 	-0.001160, 	-0.000366, 	 0.000458, 	 0.000488, 
	 0.000488, 	-0.000214, 	-0.000885, 	-0.001923, 	-0.002503, 	-0.002472, 	-0.001617, 	-0.000366, 
	 0.001160, 	 0.002014, 	 0.001831, 	 0.000824, 	-0.000946, 	-0.002350, 	-0.003265, 	-0.003265, 
	-0.002228, 	-0.001129, 	 0.000458, 	 0.001434, 	 0.002136, 	 0.002441, 	 0.002197, 	 0.001770, 
	 0.000519, 	-0.000488, 	-0.001679, 	-0.001892, 	-0.001740, 	-0.000488, 	 0.000824, 	 0.001801, 
	 0.001862, 	 0.000610, 	-0.001068, 	-0.002899, 	-0.003540, 	-0.003296, 	-0.002197, 	-0.000977, 
	 0.000092, 	 0.000641, 	 0.000702, 	 0.000183, 	-0.000610, 	-0.001587, 	-0.001953, 	-0.002319, 
	-0.001709, 	-0.001129, 	-0.000366, 	-0.000183, 	-0.000732, 	-0.001679, 	-0.002564, 	-0.002960, 
	-0.002441, 	-0.001862, 	-0.001190, 	-0.001373, 	-0.001648, 	-0.002380, 	-0.002960, 	-0.003052, 
	-0.002930, 	-0.002472, 	-0.002319, 	-0.001740, 	-0.001495, 	-0.001038, 	-0.001129, 	-0.000824, 
	-0.000977, 	-0.000641, 	-0.000549, 	 0.000092, 	 0.000519, 	 0.000671, 	 0.000519, 	-0.000092, 
	-0.000732, 	-0.001434, 	-0.001984, 	-0.002167, 	-0.002258, 	-0.002106, 	-0.001617, 	-0.000671, 
	 0.000336, 	 0.000824, 	 0.001038, 	 0.000519, 	-0.000092, 	-0.001007, 	-0.001404, 	-0.001495, 
	-0.000702, 	-0.000122, 	 0.000610, 	 0.000671, 	 0.000488, 	-0.000366, 	-0.001251, 	-0.002197, 
	-0.002838, 	-0.003235, 	-0.003449, 	-0.003296, 	-0.002838, 	-0.001831, 	-0.000641, 	 0.000488, 
	 0.000885, 	 0.000580, 	-0.000305, 	-0.001099, 	-0.001862, 	-0.001709, 	-0.001434, 	-0.000153, 
	 0.000763, 	 0.001831, 	 0.002258, 	 0.002228, 	 0.001709, 	 0.000793, 	-0.000275, 	-0.000824, 
	-0.000916, 	-0.000488, 	 0.000244, 	 0.000793, 	 0.000977, 	 0.000824, 	 0.000336, 	-0.000061, 
	-0.000427, 	-0.000305, 	-0.000061, 	 0.000092, 	 0.000488, 	 0.000153, 	 0.000244, 	-0.000366, 
	-0.000549, 	-0.000610, 	-0.000458, 	 0.000305, 	 0.000824, 	 0.001770, 	 0.001770, 	 0.001495, 
	 0.000244, 	-0.000519, 	-0.001282, 	-0.001129, 	-0.000641, 	 0.000092, 	 0.000610, 	 0.000061, 
	-0.000671, 	-0.001434, 	-0.001526, 	-0.000549, 	 0.000702, 	 0.002228, 	 0.002716, 	 0.002167, 
	 0.001129, 	 0.000061, 	-0.000061, 	 0.000549, 	 0.001770, 	 0.002594, 	 0.002899, 	 0.002625, 
	 0.001801, 	 0.001251, 	 0.000702, 	 0.000366, 	 0.000061, 	-0.000305, 	-0.000763, 	-0.000641, 
	-0.000336, 	 0.000305, 	 0.001129, 	 0.001526, 	 0.001740, 	 0.001495, 	 0.001160, 	 0.001129, 
	 0.001404, 	 0.001984, 	 0.002472, 	 0.002869, 	 0.002838, 	 0.002289, 	 0.001831, 	 0.001068, 
	 0.000763, 	 0.000549, 	 0.000397, 	 0.000305, 	 0.000214, 	-0.000061, 	-0.000244, 	-0.000458, 
	-0.000549, 	-0.000336, 	-0.000153, 	 0.000580, 	 0.000977, 	 0.001617, 	 0.001556, 	 0.001190, 
	 0.000824, 	 0.000214, 	 0.000122, 	 0.000366, 	 0.000610, 	 0.001221, 	 0.000885, 	 0.000702, 
	-0.000153, 	-0.000519, 	-0.000549, 	-0.000214, 	 0.000275, 	 0.000580, 	 0.000763, 	 0.000732, 
	 0.000610, 	 0.000427, 	 0.000275, 	-0.000122, 	-0.000244, 	-0.000610, 	-0.000641, 	-0.000580, 
	-0.000397, 	 0.000336, 	 0.000763, 	 0.001343, 	 0.001373, 	 0.001129, 	 0.000793, 	 0.000610, 
	 0.000763, 	 0.000763, 	 0.000641, 	 0.000275, 	 0.000000, 	-0.000275, 	-0.000183, 	-0.000153, 
	-0.000092, 	 0.000031, 	-0.000305, 	-0.000519, 	-0.001068, 	-0.001129, 	-0.001129, 	-0.001038, 
	-0.000488, 	-0.000183, 	 0.000641, 	 0.001007, 	 0.001587, 	 0.001770, 	 0.001923, 	 0.001556, 
	 0.001282, 	 0.000702, 	-0.000061, 	-0.000977, 	-0.001190, 	-0.001282, 	-0.000580, 	 0.000122, 
	 0.000946, 	 0.001373, 	 0.001038, 	 0.000519, 	-0.000549, 	-0.001526, 	-0.001923, 	-0.002197, 
	-0.001282, 	-0.000427, 	 0.000793, 	 0.001801, 	 0.002106, 	 0.001892, 	 0.000977, 	-0.000061, 
	-0.000793, 	-0.000855, 	-0.000183, 	 0.001038, 	 0.001801, 	 0.002319, 	 0.001648, 	 0.000641, 
	-0.000977, 	-0.002075, 	-0.002289, 	-0.001648, 	-0.000366, 	 0.000610, 	 0.000977, 	 0.000549, 
	-0.000183, 	-0.000824, 	-0.000671, 	 0.000214, 	 0.001099, 	 0.001709, 	 0.001526, 	 0.001251, 
	 0.000885, 	 0.001038, 	 0.001617, 	 0.002075, 	 0.002472, 	 0.002075, 	 0.001404, 	 0.000641, 
	 0.000244, 	 0.000763, 	 0.001190, 	 0.001862, 	 0.001556, 	 0.001038, 	 0.000397, 	 0.000153, 
	 0.000610, 	 0.001556, 	 0.002625, 	 0.003052, 	 0.002838, 	 0.001892, 	 0.001129, 	 0.000336, 
	 0.000427, 	 0.000793, 	 0.001434, 	 0.001770, 	 0.001770, 	 0.001282, 	 0.000885, 	 0.000458, 
	 0.000763, 	 0.001221, 	 0.001801, 	 0.001953, 	 0.001648, 	 0.001465, 	 0.001251, 	 0.001099, 
	 0.001099, 	 0.000488, 	 0.000031, 	-0.000732, 	-0.000610, 	 0.000000, 	 0.000855, 	 0.001434, 
	 0.001556, 	 0.001038, 	 0.000580, 	-0.000061, 	-0.000214, 	-0.000427, 	-0.000427, 	-0.000641, 
	-0.000977, 	-0.001282, 	-0.001587, 	-0.001465, 	-0.000916, 	-0.000458, 	 0.000153, 	-0.000153, 
	-0.000427, 	-0.001282, 	-0.001556, 	-0.001831, 	-0.001312, 	-0.000549, 	 0.000214, 	 0.000366, 
	 0.000122, 	-0.000519, 	-0.001099, 	-0.001099, 	-0.000580, 	 0.000549, 	 0.001740, 	 0.002625, 
	 0.002594, 	 0.001709, 	 0.000305, 	-0.001068, 	-0.001587, 	-0.001068, 	-0.000183, 	 0.000671, 
	 0.000641, 	 0.000092, 	-0.000671, 	-0.001160, 	-0.000763, 	 0.000061, 	 0.001434, 	 0.001892, 
	 0.001740, 	 0.000549, 	-0.000702, 	-0.001465, 	-0.001282, 	-0.000458, 	 0.000427, 	 0.000793, 
	 0.000122, 	-0.000885, 	-0.002136, 	-0.002533, 	-0.002655, 	-0.001953, 	-0.001312, 	-0.000885, 
	-0.001160, 	-0.001556, 	-0.002380, 	-0.002167, 	-0.002167, 	-0.001373, 	-0.001190, 	-0.001129, 
	-0.001526, 	-0.001892, 	-0.002136, 	-0.001923, 	-0.001587, 	-0.001190, 	-0.000793, 	-0.001251, 
	-0.001404, 	-0.001923, 	-0.002014, 	-0.001984, 	-0.001831, 	-0.001679, 	-0.001526, 	-0.001679, 
	-0.001892, 	-0.002106, 	-0.001831, 	-0.001679, 	-0.001099, 	-0.000855, 	-0.000275, 	 0.000183, 
	 0.000580, 	 0.000702, 	 0.000732, 	 0.000549, 	 0.000183, 	-0.000214, 	-0.000153, 	 0.000122, 
	 0.000732, 	 0.000977, 	 0.000702, 	 0.000092, 	-0.000793, 	-0.001404, 	-0.001892, 	-0.002014, 
	-0.001953, 	-0.001526, 	-0.001038, 	-0.000214, 	 0.000397, 	 0.000916, 	 0.000885, 	 0.000366, 
	-0.000488, 	-0.001221, 	-0.001556, 	-0.001404, 	-0.000855, 	-0.000305, 	 0.000305, 	 0.000732, 
	 0.000732, 	 0.000732, 	 0.000397, 	-0.000061, 	-0.000671, 	-0.001251, 	-0.001862, 	-0.002014, 
	-0.001923, 	-0.001373, 	-0.000916, 	-0.000702, 	-0.000824, 	-0.001465, 	-0.001740, 	-0.001984, 
	-0.001587, 	-0.000916, 	-0.000397, 	 0.000061, 	-0.000214, 	-0.000397, 	-0.000824, 	-0.000855, 
	-0.000793, 	-0.000580, 	-0.000580, 	-0.000855, 	-0.001282, 	-0.001648, 	-0.001770, 	-0.001465, 
	-0.001129, 	-0.000549, 	-0.000153, 	 0.000031, 	 0.000092, 	-0.000092, 	-0.000427, 	-0.000580, 
	-0.000641, 	-0.000458, 	 0.000214, 	 0.000671, 	 0.001129, 	 0.001434, 	 0.001190, 	 0.001251, 
	 0.001129, 	 0.001404, 	 0.001282, 	 0.001251, 	 0.000549, 	 0.000183, 	-0.000397, 	-0.000366, 
	 0.000000, 	 0.000580, 	 0.001007, 	 0.001190, 	 0.000977, 	 0.000702, 	 0.000397, 	 0.000458, 
	 0.000458, 	 0.000702, 	 0.000671, 	 0.000671, 	 0.000397, 	 0.000031, 	-0.000061, 	-0.000336, 
	 0.000153, 	 0.000031, 	 0.000153, 	-0.000427, 	-0.000946, 	-0.001801, 	-0.002289, 	-0.002472, 
	-0.002197, 	-0.001709, 	-0.001221, 	-0.000885, 	-0.000916, 	-0.000855, 	-0.000763, 	-0.000397, 
	 0.000366, 	 0.000916, 	 0.001465, 	 0.001190, 	 0.000519, 	-0.000214, 	-0.000885, 	-0.001038, 
	-0.000977, 	-0.000336, 	 0.000031, 	 0.000244, 	-0.000061, 	-0.000305, 	-0.000549, 	-0.000397
};

PROGMEM const char* const err_msg_data[AudioFilterIRCabsim_SD_F32::IR_WAV_LAST]=
{
	"IR WAV OK",
	"NOT A RIFF FILE",
	"NOT A WAV FILE",
	"BAD HEADER",
	"BAD TYPE",
	"BAD CHANNELS",
	"BAD_FS"
	"BAD BPS",
	"BAD BITRATE",
	"BAD BPS",
	"NO_FMT",
	"FILE NOT FOUND"
};

const float32_t* AudioFilterIRCabsim_SD_F32::ir_default_guitar = &ir_default_guitar_data[0];

PROGMEM const char off_msg_data[sizeof(TCAB_OFF_MSG)] = TCAB_OFF_MSG;
const char* AudioFilterIRCabsim_SD_F32::off_msg = off_msg_data;
PROGMEM const char default_ir_path_data[sizeof(TCAB_DEFAULT_IR_PATH)] = TCAB_DEFAULT_IR_PATH;
const char* AudioFilterIRCabsim_SD_F32::default_ir_path = default_ir_path_data;
PROGMEM const char default_conf_path_data[sizeof(TCAB_DEFAULT_CONF_PATH)] = TCAB_DEFAULT_CONF_PATH;
const char* AudioFilterIRCabsim_SD_F32::default_conf_path = default_conf_path_data;

const char* const* AudioFilterIRCabsim_SD_F32::err_msg = err_msg_data;

AudioFilterIRCabsim_SD_F32::AudioFilterIRCabsim_SD_F32() : AudioStream_F32(2, inputQueueArray_f32)
{
	if (!delay.init(delay_l)) 
	{
		return;
	}
	last_sample_buffer_L = (float32_t*)malloc(TCAB_BUFFER_SIZE * TCAB_N_B * sizeof(float32_t));
	last_sample_buffer_R = (float32_t*)malloc(TCAB_BUFFER_SIZE * TCAB_N_B * sizeof(float32_t));
	maskgen = (float32_t*)malloc(TCAB_FFT_LENGTH * 2 * sizeof(float32_t));
	fftout = (float32_t*)malloc(TCAB_NFORMAX * TCAB_FFT_LENGTH * 2 * sizeof(float32_t));
	wav_ir_data = (float32_t*)malloc(TCAB_IR_LEN_MAX_SAMPLES * sizeof(float32_t));
	ir_file_name = (char*)malloc(TCAB_IR_NAME_SIZE_BYTES);

	if (!last_sample_buffer_L || !last_sample_buffer_R || !maskgen || 
		!fftout || !wav_ir_data || !ir_file_name)
	{
		return;
	}
	memset(maskgen, 0, TCAB_FFT_LENGTH * 2 * sizeof(float32_t));
	memset(fftout, 0, TCAB_NFORMAX * TCAB_FFT_LENGTH * 2 * sizeof(float32_t));
	memset(wav_ir_data, 0, TCAB_IR_LEN_MAX_SAMPLES * sizeof(float32_t));
	arm_fir_init_f32(&FIR_preL, nfir, (float32_t *)FIRk_preL, &FIRstate[0][0], (uint32_t)block_size);
	arm_fir_init_f32(&FIR_preR, nfir, (float32_t *)FIRk_preR, &FIRstate[1][0], (uint32_t)block_size);
	arm_fir_init_f32(&FIR_postL, nfir, (float32_t *)FIRk_postL, &FIRstate[2][0], (uint32_t)block_size);
	arm_fir_init_f32(&FIR_postR, nfir, (float32_t *)FIRk_postR, &FIRstate[3][0], (uint32_t)block_size);
	initialized = true;
}

/**
 * @brief check if SD card is present and ir files are available
 */
void AudioFilterIRCabsim_SD_F32::begin()
{
	if (SD.mediaPresent())
	{
		// previous config found?
		File f = SD.open(default_conf_path);
		if (f)
		{
			f.readBytesUntil('\0', ir_file_name, TCAB_IR_NAME_SIZE_BYTES);
			//Serial.printf("Last IR: %s\r\n", ir_file_name);
			f.close();
			// scan the IR directory for the last used file
			scan_ir_dir(true);
			//Serial.printf("Total files found: %d, idx=%d\r\n", ir_file_total, ir_file_idx);
		}
		else	
		{
			ir_file_idx = 0;
			ir_folder = SD.open(default_ir_path);
			ir_folder.rewindDirectory();
			File ir = ir_folder.openNextFile();
			while (parse_wav_header(ir)==false)
			{
				ir_file_idx++;
				ir = ir_folder.openNextFile();
			}
			snprintf(ir_file_name, TCAB_IR_NAME_SIZE_BYTES, ir.name());
			if (*(ir_file_name+TCAB_IR_NAME_SIZE_BYTES-1) != 0)
			{
				*(ir_file_name+TCAB_IR_NAME_SIZE_BYTES-1) = 0;
			}
			Serial.printf("New default IR: file# %d %s\r\n", ir_file_idx, ir_file_name);
			ir.close();

			f = SD.open(default_conf_path, FILE_WRITE_BEGIN); // create config file
			if (!f) 
			{
				Serial.println("Creating config file failed!");	
			}
			else
			{
				f.print(ir_file_name);
				f.write(0);
				f.close();
				Serial.println("Written default config file");
				ir_load(ir_file_name);
			}
		}
		return;
	}
	// no IR files found, load the built in IR
	load_builtin_ir();
	ir_file_total = 0;
	ir_file_idx = 0;
}

/**
 * @brief loads the built in IR data in case no SD card is detected
 */
void AudioFilterIRCabsim_SD_F32::load_builtin_ir()
{
	ir_load((float32_t *)ir_default_guitar_data, sizeof(ir_default_guitar_data)/sizeof(float32_t));
	sniprintf(ir_file_name, TCAB_IR_NAME_SIZE_BYTES, "BUILT IN");
}

/**
 * @brief Main DSP update function
 */
void AudioFilterIRCabsim_SD_F32::update()
{
#if defined(__IMXRT1062__)
	if (!initialized) return;
	audio_block_f32_t *blockL, *blockR;

	blockL = AudioStream_F32::receiveWritable_f32(0);
	blockR = AudioStream_F32::receiveWritable_f32(1);
	if (!blockL || !blockR)
	{
		if (blockL) AudioStream_F32::release(blockL);
		if (blockR) AudioStream_F32::release(blockR);
		return;
	}
	if (!ir_loaded) // ir not loaded yet or bypass mode
	{
		// bypass clean signal
		AudioStream_F32::transmit(blockL, 0);
		AudioStream_F32::release(blockL);
		AudioStream_F32::transmit(blockR, 1);
		AudioStream_F32::release(blockR);
		return;
	}
	// scale the input signal 
	if (audio_gain != 1.0f)
	{
		arm_scale_f32(blockL->data, audio_gain, blockL->data, blockL->length);
		arm_scale_f32(blockR->data, audio_gain, blockR->data, blockR->length);
	}
	if (first_block) // fill real & imaginaries with zeros for the first BLOCKSIZE samples
	{
		memset(&fftin[0], 0, blockL->length*sizeof(float32_t)*4);
		first_block = 0;
	}
	else
	{
		memcpyInterleave_f32(last_sample_buffer_L, last_sample_buffer_R, fftin, blockL->length);
	}
	if (doubleTrack)
	{
		arm_fir_f32(&FIR_preL, blockL->data, blockL->data, blockL->length);
		arm_fir_f32(&FIR_preR, blockR->data, blockR->data, blockR->length);
		// invert phase for channel R
		arm_scale_f32(blockR->data, -1.0f, blockR->data, blockR->length);
		// run channelR delay
		for (int i=0; i<blockR->length; i++)
		{
			blockR->data[i] = delay.process(blockR->data[i]);
			delay.updateIndex();
		}
	}
	arm_copy_f32(blockL->data, last_sample_buffer_L, blockL->length);
	arm_copy_f32(blockR->data, last_sample_buffer_R, blockR->length);

	memcpyInterleave_f32(last_sample_buffer_L, last_sample_buffer_R, fftin + FFT_L, blockL->length); // interleave copy it to fftin at offset FFT_L
	arm_cfft_f32(S, fftin, 0, 1);

	uint32_t buffidx512 = buffidx * 512;
	ptr1 = ptr_fftout + buffidx512; 			// set pointer to proper segment of fftout array
	memcpy(ptr1, fftin, 2048);			 		// copy 512 samples from fftin to fftout (at proper segment)
	k = buffidx;
	memset(accum, 0, TCAB_BUFFER_SIZE * 16); 	// clear accum array
	k512 = k * 512;						   		// save 7 k*512 multiplications per inner loop
	j512 = 0;
	for (uint32_t j = 0; j < nfor; j++) 		// BM np was nfor
	{
		ptr1 = ptr_fftout + k512;
		ptr2 = ptr_fmask + j512;
		// do a complex MAC (multiply/accumulate)
		arm_cmplx_mult_cmplx_f32(ptr1, ptr2, ac2, 256); // This is the complex multiply
		for (int q = 0; q < 512; q = q + 8)
		{ 
			accum[q] += ac2[q];
			accum[q + 1] += ac2[q + 1];
			accum[q + 2] += ac2[q + 2];
			accum[q + 3] += ac2[q + 3];
			accum[q + 4] += ac2[q + 4];
			accum[q + 5] += ac2[q + 5];
			accum[q + 6] += ac2[q + 6];
			accum[q + 7] += ac2[q + 7];
		}
		k--;
		if (k < 0)  k = nfor - 1;
		k512 = k * 512;
		j512 += 512;
	} // end np loop
	buffidx++;
	buffidx = buffidx % nfor;

	arm_cfft_f32(iS, accum, 1, 1);

	for (int i = 0; i < blockL->length; i++)
	{
		blockL->data[i] = accum[i * 2 + 0];
		blockR->data[i] = accum[i * 2 + 1];
	}
	// apply post EQ, restore the channel R phase, reduce the gain a bit
	if (doubleTrack)  
	{
		arm_fir_f32(&FIR_postL, blockL->data, blockL->data, blockL->length);
		arm_fir_f32(&FIR_postR, blockR->data, blockR->data, blockR->length);
		arm_scale_f32(blockR->data, -doubler_gainR, blockR->data, blockR->length);
		arm_scale_f32(blockL->data, doubler_gainL, blockL->data, blockL->length);		
	}
	AudioStream_F32::transmit(blockL, 0);
	AudioStream_F32::release(blockL);
	AudioStream_F32::transmit(blockR, 1);
	AudioStream_F32::release(blockR);
#endif
}

/**
 * @brief load next file in the detected pool of IRs
 * 
 * @return ir_wav_result_t 
 */
FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::ir_load_next()
{
	uint16_t idx = ir_file_idx;
	ir_wav_result_t result;
	if (ir_file_total == 0 or !ir_folder) 
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
	File ir_file = ir_folder.openNextFile();
	idx++;
	if (idx >= ir_file_total)
	{
		idx = 0;
		ir_folder.rewindDirectory();
		ir_file = ir_folder.openNextFile();
	}
	while (ir_file.isDirectory() or !parse_wav_header(ir_file))
	{	
		idx++;
		if (idx >= ir_file_total)
		{
			idx = 0;
			ir_folder.rewindDirectory();
		}
		ir_file = ir_folder.openNextFile();
	}

	if (ir_file)
	{
		ir_file_idx = idx;
		ir_file.seek(0);
		result = ir_load(ir_file);
		if (result == IR_WAV_SUCCESS)
		{
			write_conf();
		}
		return result;
	}
	else
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
}
/**
 * @brief load previous IR file in the directory
 * 
 * @return operation result 
 */
FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::ir_load_prev()
{

	int16_t idx_requested;
	if (ir_file_total == 0 or !ir_folder) 
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
	idx_requested = (int16_t)ir_file_idx - 1;
	if (idx_requested < 0) idx_requested = ir_file_total-1;
	return(ir_load(idx_requested));
}
/**
 * @brief rewinds the IR folder back to beginning and loads
 * 			the 1st valid file
 * 
 * @return operation result
 */
FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::ir_load_first()
{
	File ir_file;
	if (ir_file_total == 0 or !ir_folder) 
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
	ir_folder.rewindDirectory(); // start from the beginning
	ir_file_idx = 0;
	ir_file = ir_folder.openNextFile();
	while (parse_wav_header(ir_file)==false)
	{
		ir_file_idx++;
		ir_file = ir_folder.openNextFile();
	}
	return (ir_load(ir_file));
}

/**
 * @brief Load an IR wav file using a path to the file
 * 		e.g. ir_load("ir/guitar_cab.wav")
 * 
 * @param filePath WAV file path
 * @return ir_wav_result_t operation result
 */
FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::ir_load(const char *filePath)
{
	if (strcmp(filePath, off_msg) == 0)
	{
		ir_loaded = 0;
		snprintf(ir_file_name, TCAB_IR_NAME_SIZE_BYTES, off_msg);
		return IR_WAV_SUCCESS;
	}
	File file = SD.open(filePath);
	if (!file)
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
	return (ir_load(file));
}

/**
 * @brief Load an IR wav file using a file pointer
 * 
 * @param file pointer to the open Wav file
 * @return ir_wav_result_t operation result
 */
FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::ir_load(File &file)
{	
	uint8_t channels;
	uint32_t sample_rate, sample_count;
	file.seek(0);
	ir_wav_result_t result = parse_wav_header(file, channels, sample_rate, ir_bitdepth, sample_count);

	if (result == IR_WAV_SUCCESS)
	{
		//Serial.printf("channels: %i Fs: %i bit depth: %i\r\n", channels, sample_rate, ir_bitdepth);
		if ( sample_count > TCAB_IR_LEN_MAX_SAMPLES ) sample_count = TCAB_IR_LEN_MAX_SAMPLES;
		uint8_t padding = sample_count % TCAB_BUFFER_SIZE;
		
		//Serial.printf("IR length: %i, padding: %i\r\n", sample_count, padding);
		sample_count += padding;
		// read the wave data
		uint16_t count = sample_count;
		float32_t* dataPtr = wav_ir_data;
		switch (ir_bitdepth)
		{
			case 16:
				while (count--)
				{
					*dataPtr++ = sd_rd_sample16(file);
					if (channels == 2) sd_rd_sample16(file); // ignore R channel
				}
				break;
			case 24:

				while (count--)
				{
					*dataPtr++ = sd_rd_sample24(file);
					if (channels == 2) sd_rd_sample24(file); // ignore R channel
				}			
				break;
			default:
				break; 
		}
		while(padding--) { *dataPtr++ = 0.0f; }
		ir_load(wav_ir_data, sample_count);
	}
	else 
	{
		ir_loaded = 0;
	}
	snprintf(ir_file_name, TCAB_IR_NAME_SIZE_BYTES, "%s", file.name());
	file.close();
	return result;
}

/**
 * @brief Load the IR data using a pointer to a float array
 * 
 * @param dataPtr pointer to the float IR data array
 * @param dataLength number of samples
 * @return true success
 */
bool AudioFilterIRCabsim_SD_F32::ir_load(float32_t* dataPtr, size_t dataLength)
{
	if ( dataLength > TCAB_IR_LEN_MAX_SAMPLES ) dataLength = TCAB_IR_LEN_MAX_SAMPLES;
	ir_length_ms =  (1000.0f * dataLength) / AUDIO_SAMPLE_RATE_EXACT;
	AudioNoInterrupts();
	nfor = dataLength / TCAB_BUFFER_SIZE;
	ptr_fmask = &fmask[0][0];
	ptr_fftout = &fftout[0];
	memset(ptr_fftout, 0, nfor*512*4);
	memset(fftin, 0,  512 * 4);
	init_partitioned_filter_masks(dataPtr);
	delay.reset();
	ir_loaded = 1;
	AudioInterrupts();
	return true;
}
/**
 * @brief Load the IR with specified wav file index, possible only after
 * 			ir folder scan and if there are wav files found
 * 
 * @param fileIndex index of the file in range 0 - (ir_file_total-1)
 * @return ir_wav_result_t operation result 
 */
FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::ir_load(uint16_t fileIndex) 
{
	uint16_t idx;
	ir_wav_result_t result;
	File ir_file;

	if (ir_file_total == 0 or !ir_folder || fileIndex >=ir_file_total) 
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
	ir_folder.rewindDirectory(); // start from the beginning
	idx = 0;
	ir_file = ir_folder.openNextFile();
	while (idx != fileIndex)
	{	
		idx++;
		if (idx >= ir_file_total)
		{
			idx = 0;
			ir_folder.rewindDirectory();
		}
		ir_file = ir_folder.openNextFile();
	}
	if (ir_file)
	{
		ir_file_idx = idx;
		ir_file.seek(0);
		result = ir_load(ir_file);
		if (result == IR_WAV_SUCCESS)
		{
			write_conf();
		}
		return result;
	}
	else
	{
		return IR_WAV_ERR_FILE_NOT_FOUND;
	}
}

void AudioFilterIRCabsim_SD_F32::init_partitioned_filter_masks(const float32_t *irPtr)
{
	const static arm_cfft_instance_f32 *maskS;
	maskS = &arm_cfft_sR_f32_len256;
	for (uint32_t j = 0; j < nfor; j++)
	{
		memset(&maskgen[0], 0, TCAB_BUFFER_SIZE * 4 *sizeof(float32_t));
		for (unsigned i = 0; i < TCAB_BUFFER_SIZE; i++)
		{
			maskgen[i * 2 + TCAB_BUFFER_SIZE * 2] = irPtr[i + j * TCAB_BUFFER_SIZE];
		}
		arm_cfft_f32(maskS, maskgen, 0, 1);
		for (unsigned i = 0; i < TCAB_BUFFER_SIZE * 4; i++)
		{
			fmask[j][i] = maskgen[i];
		}
	}
}


FLASHMEM bool AudioFilterIRCabsim_SD_F32::parse_wav_header(File &file)
{
	uint8_t b1, b2;
	uint32_t w1, w2;
	ir_wav_result_t result = parse_wav_header(file, b1, w1, b2, w2);
	return (result == IR_WAV_SUCCESS);
}

FLASHMEM AudioFilterIRCabsim_SD_F32::ir_wav_result_t AudioFilterIRCabsim_SD_F32::parse_wav_header(
	File &file, uint8_t &channels, uint32_t &sample_rate, uint8_t &bitdepth, uint32_t &count)
{
	uint32_t sig = sd_read_u32(file);
	if (sig != TCAB_WAV_RIFF)
	{
		return IR_WAV_ERR_NO_RIFF;
	}

	uint32_t lenleft = sd_read_u32(file);
	sig = sd_read_u32(file);
	if (sig != TCAB_WAV_WAVE)
	{
		return IR_WAV_ERR_NO_WAV;
	}
	sig = sd_read_u32(file);
	if (sig == TCAB_WAV_FMT)
	{
		uint32_t chunklen = sd_read_u32(file);
		lenleft -= 12; // for signatures
		lenleft -= chunklen;

		if (chunklen != 16)
		{
			return IR_WAV_ERR_NO_HEADER;
		}
		uint16_t samptype = sd_read_u16(file);
		if (samptype != 1)
		{
			return IR_WAV_ERR_TYPE_NOT_1;
		}
		channels = sd_read_u16(file);
		if (channels != 1 and channels != 2)
		{
			return IR_WAV_ERR_BAD_CHANNELS;
		}

		sample_rate = sd_read_u32(file);
		uint32_t bps = sd_read_u32(file);
		uint8_t bytes_per_sample = (uint8_t)sd_read_u16(file);
		bitdepth = (uint8_t)sd_read_u16(file);

		if (sample_rate != (uint32_t)AUDIO_SAMPLE_RATE)
		{
			return IR_WAV_ERR_BAD_FS;
		}

		if (bps != bytes_per_sample * sample_rate)
		{
			return IR_WAV_ERR_BAD_BPS;
		}
		if (bitdepth != 24 and bitdepth != 16)
		{
			return IR_WAV_ERR_BAD_BITS;
		}

		sig = sd_read_u32(file);
		while (sig == TCAB_WAV_LIST) // skip LIST
		{
			uint32_t chunklen = sd_read_u32(file);
			lenleft -= chunklen + 4;
			for (unsigned int i = 0; i < chunklen; i++)
				file.read();
			sig = sd_read_u32(file);
		}

		if (sig != TCAB_WAV_DATA)
		{
			return IR_WAV_ERR_NO_DATA;
		}

		uint32_t data_len = sd_read_u32(file);
		lenleft -= 8;
		count = data_len / bytes_per_sample;
		return IR_WAV_SUCCESS;
	}
	return IR_WAV_ERR_NO_FMT;
}


/**
 * @brief scans the default IR folder for valid files
 * 
 * @param load load the IR when found
 * @return fail or success
 */
FLASHMEM bool AudioFilterIRCabsim_SD_F32::scan_ir_dir(bool load=false)
{
	ir_file_total = 0;
	ir_file_idx = 0;
	uint16_t idx = 0;
	bool found = false;
	ir_folder = SD.open(default_ir_path);

	if (!ir_folder or !ir_folder.isDirectory()) 
	{
		return false;
	}
	ir_folder.rewindDirectory();

	File ir_file = ir_folder.openNextFile();
	while (ir_file)
	{
		// ignore directories
		if (!ir_file.isDirectory())
		{
			if (strncmp(ir_file.name(), ir_file_name, TCAB_IR_NAME_SIZE_BYTES) == 0)
			{
				found = true;
				if (load) ir_load(ir_file);
			}
			if (!found) ir_file_idx++;
			ir_file_total++;
		}
		ir_file = ir_folder.openNextFile();
	}
	ir_folder.rewindDirectory(); // start from the beginning
	idx = 0;
	ir_file = ir_folder.openNextFile();
	while (idx != ir_file_idx)
	{	
		idx++;
		if (idx >= ir_file_total)
		{
			idx = 0;
			ir_folder.rewindDirectory();
		}
		ir_file = ir_folder.openNextFile();
	}
	if (ir_file) ir_file.close();
	return (ir_file_total > 0);
}

/**
 * @brief Factory reset is done by removing the config file
 * 		(last used IR file name) and reinitializing the component.
 * 
 * @return none
 */
FLASHMEM void AudioFilterIRCabsim_SD_F32::factory_reset()
{
	SD.remove(default_conf_path);
	begin();
}

/**
 * @brief write the current file name as last used IR,
 * 			will be loaded upon next power up.
 * 
 * @return fail or success
 */
FLASHMEM bool AudioFilterIRCabsim_SD_F32::write_conf()
{
	File f = SD.open(default_conf_path, FILE_WRITE_BEGIN);
	if (f)
	{
		f.print(ir_file_name);
		f.write(0);
		f.close();
		return true;
	}
	return false;
}

// end of filter_ir_cabsim_SD_F32.cpp